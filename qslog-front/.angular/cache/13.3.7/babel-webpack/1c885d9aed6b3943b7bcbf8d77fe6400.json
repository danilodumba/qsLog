{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let HttpClientInterceptor = /*#__PURE__*/(() => {\n  class HttpClientInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            'Authorization': 'Bearer ' + token,\n            'Content-Type': 'application/json'\n          }\n        });\n      } else {\n        this.goToLogin();\n      }\n\n      return next.handle(request).pipe(tap(() => {}, error => {\n        if (!token) {\n          return;\n        }\n\n        if (error.status === 401) {\n          this.showSessionExpired();\n        }\n\n        if (error.status === 403) {\n          Swal.fire('Não autorizado.', 'Você não tem autorização para fazer essa operação.', 'warning');\n        } else if (error.status >= 400 && error.status < 500) {//Swal.fire('Oops... Fique atento!', error.error, 'warning');\n        } else if (error.status >= 500) {//Swal.fire('Algo errado aconteceu!', 'Ocorreu um erro interno no servidor, tente novamente mais tarde ou entre em contrato com nosso suporte.', 'error');\n        }\n      }));\n    }\n\n    goToLogin() {\n      this.router.navigateByUrl('/login');\n    }\n\n    showSessionExpired() {\n      Swal.fire({\n        title: 'Sessão Expirada',\n        text: 'Por favor, faça novamente seu login no sistema.',\n        icon: 'info',\n        showCancelButton: false,\n        confirmButtonText: 'Ok',\n        confirmButtonColor: '#1BC5BD'\n      }).then(result => {\n        this.goToLogin();\n      });\n    }\n\n  }\n\n  HttpClientInterceptor.ɵfac = function HttpClientInterceptor_Factory(t) {\n    return new (t || HttpClientInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  HttpClientInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpClientInterceptor,\n    factory: HttpClientInterceptor.ɵfac\n  });\n  return HttpClientInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}